What happens when you initialize a repository? Why do you need to do it? 
When you initialize a repository git install all the nessary meta data into a .git folder. The period before the name tells the OS to keep this file hidden. It needs to be done so git can set up all of the needed information into this special folder to keep track of all of the commits and data associated with that. 

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is a space that git uses to stage all of the needed files for the commit. It allows the user to be selective about what they commit. I think this is extremely valuable because you want the commits to be logical. They need to a defined change that is being commited. It saves the user from committing data that is not completed. 
How can you use the staging area to make sure you have one commit per logical change?
You can use the "git diff" command to check the difference between the staging and the working directories. It will show all of the changes between the two so you can make sure your commit contains one logical change. If you also use "git diff --staged" it will compare the staging area to the last commit so you can also review the changes you are about to commit to make sure if match the rule one logical change per commit. 
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
If you were to create a different version of the game with an experimental feature or different language each one of those would consitute its own branch. It would allow you to have multiple version of your program in the same repo with out making changes to the master. It would also allow you to switch between all of these versions without any loss of data or risk to the master file. 