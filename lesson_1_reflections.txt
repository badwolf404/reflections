How did viewing a diff between two versions of a file help you see the bug that was introduced?
Using the diff function in the command line allowed me to use the computer to find the difference in the files and outline them for me. It saved me the headache and pain of having to compare every single line to find the bugs or errors in the code. Extremely useful tool. 

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Having copies of all of the code and changes you have made could be greatly benficial to a progmramer. It would allow of the work you have ever done on the program to be saved. For instance if you found something that you did not need at one point but many version later realized you have a need for that piece of code, you can go back and get the code instead of having to rewrite it.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

There are pros and cons with each approach. If you decide to commit manually then you will have commits that logically make sense and have a defined purpose. THe con is human error, you could forget to commit and loss a lot of work. The automatic approach has the opposite pros and cons. The pro is the work is saved periodically and you will have a version saved that is pretty close to real time. The con is it could save the file in the middle of a line or statement breaking the logic in your program.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

When you are writing code for programs or websites, you will often refer to a different file for things you may need for the main webpage/program. It is more useful to commit a full program directory tracking each file and all of the changes to each, instead of committing each file manually.

How might using version control make you more confident to make changes that could break something?

Version control allows you for a way back to a pervious working version. By having the pervious version you do not have to worry about losing good code. 

Now that you have your workspace set up, what do you want to try using Git for?

I want to try to learn Git to be able to effectively design and code a mobile app in the andriod platform. 